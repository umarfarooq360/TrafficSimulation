Script started on Wed Mar 25 10:08:50 2015
[?1034hbash-3.2$ ./commands_subset5
<UNIX-PROMPT> pwd
/Users/hh6eb/Desktop/subset5
<UNIX-PROMPT> ls -tl *java
-rwx------@ 1 hh6eb  RICHMOND\Domain Users  6187 Mar 25 10:08 TrafficModel.java
-rwx------@ 1 hh6eb  RICHMOND\Domain Users  1513 Mar 23 20:25 Direction.java
-rwx------@ 1 hh6eb  RICHMOND\Domain Users  3148 Mar 23 20:14 Segment.java
-rwx------@ 1 hh6eb  RICHMOND\Domain Users  5800 Mar 23 20:11 Intersection.java
-rwx------@ 1 hh6eb  RICHMOND\Domain Users  3576 Mar 23 19:30 Car.java
-rwx------@ 1 hh6eb  RICHMOND\Domain Users  1290 Mar 18 18:44 Test_TrafficModel.java
-rwx------  1 hh6eb  RICHMOND\Domain Users   662 Feb 28 17:03 DebugOutput.java
<UNIX-PROMPT> cat Test_TrafficModel.java
// Team member's names: Hunter Lambert, Omar Farooq,
//                      Tyler Barnett, Hans-Peter Hoellwirth

// *****************************************************************************
// *****************************************************************************
// **** Test_TrafficModel
// *****************************************************************************
// *****************************************************************************

import java.io.*;
import java.util.*;

public class Test_TrafficModel extends Object {
    
    ///////////////////////////////////////////////////////////////////////
    /////// Main
    ///////////////////////////////////////////////////////////////////////
    public static void main(String[] args) throws FileNotFoundException {
        Scanner input = new Scanner(System.in);
        
        for (int i=0; i < 17; i++) {
            input.nextLine();
        }
        
        int numberOfIntersectionsInOneDirection = input.nextInt();
        DebugOutput.print("Number of intersections in one direction: "
                          + numberOfIntersectionsInOneDirection);
        
        TrafficModel model
                = new TrafficModel(numberOfIntersectionsInOneDirection);
        model.doTest();
    }

}
<UNIX-PROMPT> cat TrafficModel.java
// Team member's names: Hunter Lambert, Omar Farooq,
//                      Tyler Barnett, Hans-Peter Hoellwirth

// *****************************************************************************
// *****************************************************************************
// **** TrafficModel
// *****************************************************************************
// *****************************************************************************


import java.util.*;

public class TrafficModel extends Object {

    private Intersection intersections[][];
    private ArrayList<Segment> segments;
    private ArrayList<Car> cars;
    private int numIntersectionsInOneDirection;

    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public TrafficModel () {
        this.numIntersectionsInOneDirection = 0;
        this.cars = new ArrayList<Car>();
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public TrafficModel (int numIntersectionsInOneDirection) {
        this.numIntersectionsInOneDirection = numIntersectionsInOneDirection;
        this.intersections = new Intersection[numIntersectionsInOneDirection]
                                            [numIntersectionsInOneDirection];
        this.segments = new ArrayList<Segment>();
        this.cars = new ArrayList<Car>();
    }

    ///////////////////////////////////////////////////////////////////////
    /////// Do test
    ///////////////////////////////////////////////////////////////////////
    public void doTest() {
        DebugOutput.print("Create segments");
        this.createSegments();
        DebugOutput.print("Create intersections");
        this.createIntersections();
        DebugOutput.print("Create cars");
        this.createCars();
        
        for (int row=0; row < numIntersectionsInOneDirection; row++) {
            for (int col=0; col < numIntersectionsInOneDirection; col++) {
                this.intersections[row][col].doUnitOfWork();
            }
        }
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Create and print new segment
    ///////////////////////////////////////////////////////////////////////
    private void createSegment(int row, int col, int direction) {
        Segment segment = new Segment(row, col, direction);
        segments.add(segment);
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Find segment
    ///////////////////////////////////////////////////////////////////////
    private Segment findSegment(int row, int col, int direction) {
        for (int i=0; i < segments.size(); i++) {
            if (segments.get(i).equals(row, col, direction)) {
                return segments.get(i);
            }
        }
        DebugOutput.print("Could not find segment: "
                          + "col: "
                          + col
                          + "/"
                          + "row: "
                          + row
                          + "/"
                          + Direction.toString(direction));
        return null;
    }

    ///////////////////////////////////////////////////////////////////////
    /////// Initialize all segments
    ///////////////////////////////////////////////////////////////////////
    private void createSegments() {
        for (int row=0; row <= numIntersectionsInOneDirection + 1; row++) {
            for (int col=0; col <= numIntersectionsInOneDirection + 1;
                 col++) {
                if (col > 0 && col < numIntersectionsInOneDirection + 1) {
                    if (row > 0)
                        createSegment(row, col, Direction.NORTHWARD);
                    if (row < numIntersectionsInOneDirection + 1)
                        createSegment(row, col, Direction.SOUTHWARD);
                }
                if (row > 0 && row < numIntersectionsInOneDirection +1 ) {
                    if (col > 0)
                        createSegment(row, col, Direction.EASTWARD);
                    if (col < numIntersectionsInOneDirection + 1)
                        createSegment(row, col, Direction.WESTWARD);
                }
            }
        }
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Initialize all intersections
    ///////////////////////////////////////////////////////////////////////
    private void createIntersections() {
        for (int row=0; row < numIntersectionsInOneDirection; row++) {
            for (int col=0; col < numIntersectionsInOneDirection; col++) {

                int r = row + 1;
                int c = col + 1;
                
                Segment[] segments = new Segment[8];
                segments[0] = this.findSegment(c, r, Direction.SOUTHWARD);
                segments[1] = this.findSegment(c, r, Direction.EASTWARD);
                segments[2] = this.findSegment(c, r, Direction.NORTHWARD);
                segments[3] = this.findSegment(c, r, Direction.WESTWARD);
                segments[4] = this.findSegment(c, r - 1, Direction.SOUTHWARD);
                segments[5] = this.findSegment(c + 1, r, Direction.EASTWARD);
                segments[6] = this.findSegment(c, r + 1, Direction.NORTHWARD);
                segments[7] = this.findSegment(c - 1, r, Direction.WESTWARD);
                
                this.intersections[row][col]
                = new Intersection(r, c, segments);
            }
            
        }
    }

    ///////////////////////////////////////////////////////////////////////
    /////// Create cars and put each in a northward segment
    ///////////////////////////////////////////////////////////////////////
    private void createCars() {
        for (int i=0; i < numIntersectionsInOneDirection; i++) {
            this.intersections[i][i].getInNorthSegment()
            .addCar(new Car(i+1, false));
        }

    }
}
<UNIX-PROMPT> cat Intersection.java
// Team member's names: Hunter Lambert, Omar Farooq,
//                      Tyler Barnett, Hans-Peter Hoellwirth

// *****************************************************************************
// *****************************************************************************
// **** Intersection
// *****************************************************************************
// *****************************************************************************

import java.util.*;

public class Intersection extends Object {
    
    private int row;
    private int col;
    private Segment inSouthSegment, inEastSegment,
                    inNorthSegment, inWestSegment;
    private Segment outSouthSegment, outEastSegment,
                    outNorthSegment, outWestSegment;

    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Intersection () {
        
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Intersection (int row, int col) {
        this();
        this.row = row;
        this.col = col;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Intersection (int row, int col, Segment[] segments) {
        this(row, col);
        if (segments.length == 8) {
            this.inSouthSegment = segments[0];
            this.inEastSegment = segments[1];
            this.inNorthSegment = segments[2];
            this.inWestSegment = segments[3];
            this.outSouthSegment = segments[4];
            this.outEastSegment = segments[5];
            this.outNorthSegment = segments[6];
            this.outWestSegment = segments[7];
        }
    }
 
    ///////////////////////////////////////////////////////////////////////
    /////// Get incoming southward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getInSouthSegment() {
        return this.inSouthSegment;
    }
 
    ///////////////////////////////////////////////////////////////////////
    /////// Get incoming eastward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getInEastSegment() {
        return this.inEastSegment;
    }
   
    ///////////////////////////////////////////////////////////////////////
    /////// Get incoming northward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getInNorthSegment() {
        return this.inNorthSegment;
    }
   
    ///////////////////////////////////////////////////////////////////////
    /////// Get incoming westward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getInWestSegment() {
        return this.inWestSegment;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Get outgoing southward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getOutSouthSegment() {
        return this.outSouthSegment;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Get outgoing eastward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getOutEastSegment() {
        return this.outEastSegment;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Get outgoing northward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getOutNorthSegment() {
        return this.outNorthSegment;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Get outgoing westward segment
    ///////////////////////////////////////////////////////////////////////
    public Segment getOutWestSegment() {
        return this.outWestSegment;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Do unit of work
    ///////////////////////////////////////////////////////////////////////
    public void doUnitOfWork () {
        DebugOutput.print("" + this);
        DebugOutput.print("Incoming Southward: "
                          + this.inSouthSegment.toStringStatus());
        DebugOutput.print("Incoming Eastward: "
                          + this.inEastSegment.toStringStatus());
        DebugOutput.print("Incoming Northward: "
                          + this.inNorthSegment.toStringStatus());
        DebugOutput.print("Incoming Westward: "
                          + this.inWestSegment.toStringStatus());
        DebugOutput.print("Outgoing Southward: "
                          + this.outSouthSegment.toStringStatus());
        DebugOutput.print("Outgoing Eastward: "
                          + this.outEastSegment.toStringStatus());
        DebugOutput.print("Outgoing Northward: "
                          + this.outNorthSegment.toStringStatus());
        DebugOutput.print("Outgoing Westward: "
                          + this.outWestSegment.toStringStatus());
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// String representation of intersection
    ///////////////////////////////////////////////////////////////////////
    public String toString() {
        return "Intersection "
        + "col: "
        + this.col
        + "/"
        + "row: "
        + this.row;
    }
}
<UNIX-PROMPT> cat Segment.java
// Team member's names: Hunter Lambert, Omar Farooq,
//                      Tyler Barnett, Hans-Peter Hoellwirth

// *****************************************************************************
// *****************************************************************************
// **** Segment
// *****************************************************************************
// *****************************************************************************

import java.util.*;

public class Segment extends Object {
    
    private int row;
    private int col;
    private int direction;
    private LinkedList<Car> queue;

    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Segment () {
        this.queue = new LinkedList<Car>();
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Segment (int row, int col, int direction) {
        this();
        this.row = row;
        this.col = col;
        this.direction = direction;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Add car to segment queue
    ///////////////////////////////////////////////////////////////////////
    public void addCar (Car car) {
        car.setCol(this.col);
        car.setRow(this.row);
        car.setDirectionCarIsHeaded(this.direction);
        this.queue.add(car);
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Get front most car in segment queue
    ///////////////////////////////////////////////////////////////////////
    public Car getFirstCar () {
        return (Car)this.queue.peek();
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// String representation of segment
    ///////////////////////////////////////////////////////////////////////
    public String toString() {
        return "Segment "
                + "col: "
                + this.col
                + "/"
                + "row: "
                + this.row
                + "/"
                + Direction.toString(this.direction);
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// String representation of segment status
    ///////////////////////////////////////////////////////////////////////
    public String toStringStatus() {
        Car firstCar = this.getFirstCar();
        if (firstCar == null) {
            return "Segment is empty.";
        } else {
            return "Holds " + firstCar.toString();
        }
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Equals method
    ///////////////////////////////////////////////////////////////////////
    public boolean equals(int col, int row, int direction) {
        return this.col == col
            && this.row == row
            && this.direction == direction;
    }
}
<UNIX-PROMPT> cat Car.java
// Team member's names: Hunter Lambert, Omar Farooq,
//                      Tyler Barnett, Hans-Peter Hoellwirth

// *****************************************************************************
// *****************************************************************************
// **** Car
// *****************************************************************************
// *****************************************************************************

import java.util.*;

public class Car extends Object {
    
    private boolean marked;
    private int idNumber;
    private int row;
    private int col;
    private int directionCarIsHeaded;
    private int entranceTime;
    private int exitTime;

    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Car () {
        
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Car (int idNumber, boolean marked) {
        this.idNumber = idNumber;
        this.marked = marked;
    }

    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Car (int idNumber, boolean marked,
                int row, int col, int directionCarIsHeaded) {
        this(idNumber, marked);
        this.row = row;
        this.col = col;
        this.directionCarIsHeaded = directionCarIsHeaded;
    }

    ///////////////////////////////////////////////////////////////////////
    /////// Get current row position of car
    ///////////////////////////////////////////////////////////////////////
    public int getRow() {
        return this.row;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Set current row position of car
    ///////////////////////////////////////////////////////////////////////
    public void setRow(int row) {
        this.row = row;
    }

    ///////////////////////////////////////////////////////////////////////
    /////// Get current column position of car
    ///////////////////////////////////////////////////////////////////////
    public int getCol() {
        return this.col;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Set current column position of car
    ///////////////////////////////////////////////////////////////////////
    public void setCol(int col) {
        this.col = col;
    }

    ///////////////////////////////////////////////////////////////////////
    /////// Get current direction the car is heading
    ///////////////////////////////////////////////////////////////////////
    public int getDirectionCarIsHeaded() {
        return this.directionCarIsHeaded;
    }
    
    ///////////////////////////////////////////////////////////////////////
    /////// Set current direction the car is heading
    ///////////////////////////////////////////////////////////////////////
    public void setDirectionCarIsHeaded(int direction) {
        this.directionCarIsHeaded = direction;
    }

    ///////////////////////////////////////////////////////////////////////
    /////// String representation of car
    ///////////////////////////////////////////////////////////////////////
    public String toString() {
        return "Car " + this.idNumber;
    }

}
<UNIX-PROMPT> cat Direction.java
// Team member's names: Hunter Lambert, Omar Farooq,
//                      Tyler Barnett, Hans-Peter Hoellwirth

// *****************************************************************************
// *****************************************************************************
// **** Direction
// *****************************************************************************
// *****************************************************************************


import java.util.*;

public class Direction extends Object {

    public static final int SOUTHWARD  = 0;
    public static final int EASTWARD   = 1;
    public static final int NORTHWARD  = 2;
    public static final int WESTWARD   = 3;

    ///////////////////////////////////////////////////////////////////////
    /////// Constructor
    ///////////////////////////////////////////////////////////////////////
    public Direction () {
        
    }
  
    ///////////////////////////////////////////////////////////////////////
    /////// String representation of directions
    ///////////////////////////////////////////////////////////////////////
    public static String toString(int direction) {
        if (direction == SOUTHWARD) {
            return "SOUTHWARD";
        }
        if (direction == EASTWARD) {
            return "EASTWARD";
        }
        if (direction == NORTHWARD) {
            return "NORTHWARD";
        }
        if (direction == WESTWARD) {
            return "WESTWARD";
        }
        return "";
    }
}

<UNIX-PROMPT> cat data1_for_checking_top_level_logic
filename: data1_for_checking_top_level_logic 
When checking the top-level logic, the Java input statements should skip the 
first 17 lines in any file of data, then read a line as the value of 
numIntersectionsInOneDirection, then skip a line, then read a line as the 
number of cars to be created, then skip every other line (starting with skipping
the very next line) until the quantity of input numbers read is exactly
   6 times the number of cars to be created,
and then the Java program should no longer read any lines from the data file.
direction:  SOUTHWARD == 0; EASTWARD == 1; NORTHWARD == 2; WESTWARD == 3
The following three lines illustrate the somewhat-tricky terminology:
when a car travels south, the car travels SOUTHWARD
when an incoming segment of an intersection is aiming SOUTHWARD, the segment 
  is immediately north of that intersection
when an outgoing segment of an intersection is aiming SOUTHWARD, the segment
  is immediately south of that intersection
turning direction: NEVER_TURN == 0; TURN_RIGHTWARD == 1; TURN_LEFTWARD == -1
number of intersections in one direction:
2<UNIX-PROMPT> rm *class
<UNIX-PROMPT> javac Test_TrafficModel.java
<UNIX-PROMPT> javac TrafficModel.java
<UNIX-PROMPT> javac Intersection.java
<UNIX-PROMPT> javac Segment.java
<UNIX-PROMPT> javac Car.java
<UNIX-PROMPT> javac Direction.java
<UNIX-PROMPT> java Test_TrafficModel < data1_for_checking_top_level_logic
DEBUGNumber of intersections in one direction: 2
DEBUGCreate segments
DEBUGCreate intersections
DEBUGCreate cars
DEBUGIntersection col: 1/row: 1
DEBUGIncoming Southward: Segment is empty.
DEBUGIncoming Eastward: Segment is empty.
DEBUGIncoming Northward: Holds Car 1
DEBUGIncoming Westward: Segment is empty.
DEBUGOutgoing Southward: Segment is empty.
DEBUGOutgoing Eastward: Segment is empty.
DEBUGOutgoing Northward: Segment is empty.
DEBUGOutgoing Westward: Segment is empty.
DEBUGIntersection col: 2/row: 1
DEBUGIncoming Southward: Segment is empty.
DEBUGIncoming Eastward: Segment is empty.
DEBUGIncoming Northward: Segment is empty.
DEBUGIncoming Westward: Segment is empty.
DEBUGOutgoing Southward: Segment is empty.
DEBUGOutgoing Eastward: Segment is empty.
DEBUGOutgoing Northward: Holds Car 2
DEBUGOutgoing Westward: Segment is empty.
DEBUGIntersection col: 1/row: 2
DEBUGIncoming Southward: Segment is empty.
DEBUGIncoming Eastward: Segment is empty.
DEBUGIncoming Northward: Segment is empty.
DEBUGIncoming Westward: Segment is empty.
DEBUGOutgoing Southward: Segment is empty.
DEBUGOutgoing Eastward: Segment is empty.
DEBUGOutgoing Northward: Segment is empty.
DEBUGOutgoing Westward: Segment is empty.
DEBUGIntersection col: 2/row: 2
DEBUGIncoming Southward: Segment is empty.
DEBUGIncoming Eastward: Segment is empty.
DEBUGIncoming Northward: Holds Car 2
DEBUGIncoming Westward: Segment is empty.
DEBUGOutgoing Southward: Segment is empty.
DEBUGOutgoing Eastward: Segment is empty.
DEBUGOutgoing Northward: Segment is empty.
DEBUGOutgoing Westward: Segment is empty.
bash-3.2$ exit
exit

Script done on Wed Mar 25 10:09:16 2015
